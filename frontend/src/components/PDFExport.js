import React from 'react';
import jsPDF from 'jspdf';

const PDFExport = ({ analyticsData, kpis, filters }) => {
  const generatePDF = async () => {
    try {
      console.log('Starting PDF generation...');
      
      const pdf = new jsPDF();
      let yPosition = 20; // Track vertical position
      
      // Title
      pdf.setFontSize(20);
      pdf.setTextColor(79, 70, 229);
      pdf.text('Analytics Dashboard Report', 20, yPosition);
      yPosition += 20;
      
      // Date
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Generated: ${new Date().toLocaleString()}`, 20, yPosition);
      yPosition += 20;
      
      // Filters Section
      pdf.setFontSize(14);
      pdf.setTextColor(79, 70, 229);
      pdf.text('Report Filters:', 20, yPosition);
      yPosition += 15;
      
      pdf.setFontSize(10);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Start Date: ${filters.dateRange.startDate.toLocaleDateString()}`, 25, yPosition);
      yPosition += 10;
      pdf.text(`End Date: ${filters.dateRange.endDate.toLocaleDateString()}`, 25, yPosition);
      yPosition += 10;
      pdf.text(`Event Types: ${filters.eventTypes.length > 0 ? filters.eventTypes.length + ' selected' : 'All types'}`, 25, yPosition);
      yPosition += 20;
      
      // KPIs Section
      if (kpis) {
        pdf.setFontSize(14);
        pdf.setTextColor(79, 70, 229);
        pdf.text('Key Performance Indicators:', 20, yPosition);
        yPosition += 15;
        
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        
        // KPI boxes
        const kpiData = [
          ['Total Events', kpis.totalEvents.toLocaleString()],
          ['Unique Users', kpis.uniqueUsers.toLocaleString()],
          ['Event Types', kpis.uniqueEventTypes.toString()],
          ['Avg per Hour', kpis.avgPerHour.toString()]
        ];
        
        kpiData.forEach((kpi, index) => {
          const xPos = 25 + (index % 2) * 90; // Two columns
          const yPos = yPosition + Math.floor(index / 2) * 20;
          
          pdf.setFontSize(10);
          pdf.setTextColor(79, 70, 229);
          pdf.text(`${kpi[0]}:`, xPos, yPos);
          pdf.setFontSize(12);
          pdf.setTextColor(0, 0, 0);
          pdf.text(kpi[1], xPos + 35, yPos);
        });
        
        yPosition += 50;
      }
      
      // Data Summary
      if (analyticsData?.data) {
        pdf.setFontSize(14);
        pdf.setTextColor(79, 70, 229);
        pdf.text('Data Summary:', 20, yPosition);
        yPosition += 15;
        
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        pdf.text(`Total Records in Dataset: ${analyticsData.data.length}`, 25, yPosition);
        yPosition += 15;
        
        // Recent Events (simple list)
        pdf.setFontSize(12);
        pdf.setTextColor(79, 70, 229);
        pdf.text('Recent Events Sample:', 25, yPosition);
        yPosition += 10;
        
        const recentEvents = analyticsData.data.slice(-5); // Last 5 events
        pdf.setFontSize(9);
        pdf.setTextColor(0, 0, 0);
        
        recentEvents.forEach((event, index) => {
          if (yPosition > 270) { // Start new page if needed
            pdf.addPage();
            yPosition = 20;
          }
          
          const eventText = `${index + 1}. ${event.eventType} by ${event.userId} at ${new Date(event.timestamp).toLocaleString()}`;
          pdf.text(eventText, 30, yPosition);
          yPosition += 8;
        });
      }
      
      // Footer
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(128, 128, 128);
        pdf.text(`Page ${i} of ${pageCount}`, pdf.internal.pageSize.width - 30, pdf.internal.pageSize.height - 10);
        pdf.text('Generated by Analytics Platform', 20, pdf.internal.pageSize.height - 10);
      }
      
      // Save PDF
      const fileName = `analytics-report-${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);
      
      console.log('✅ PDF generated successfully!');
      
    } catch (error) {
      console.error('❌ PDF generation failed:', error);
      alert('Error generating PDF: ' + error.message);
    }
  };

  return (
    <button
      onClick={generatePDF}
      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200"
    >
      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      Export PDF Report
    </button>
  );
};

export default PDFExport;
