service: analytics-platform

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  environment:
    TENANTS_TABLE: ${self:service}-${self:provider.stage}-tenants
    ANALYTICS_TABLE: ${self:service}-${self:provider.stage}-analytics
    CONNECTIONS_TABLE: ${self:service}-${self:provider.stage}-connections
    USER_PROFILES_TABLE: ${self:service}-user-profiles-${self:provider.stage}
    TEAM_INVITATIONS_TABLE: ${self:service}-team-invitations-${self:provider.stage}
    AUDIT_LOGS_TABLE: ${self:service}-audit-logs-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-super-secret-jwt-key-change-in-production'}
    FRONTEND_URL: https://euphonious-cheesecake-ef9aec.netlify.app
    FROM_EMAIL: noreply@analytics-platform.com
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: "arn:aws:execute-api:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

functions:
  # Existing HTTP API functions
  hello:
    handler: src/handlers/hello.handler
    events:
      - http:
          path: hello
          method: get
          cors: true

  register:
    handler: src/handlers/auth.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  login:
    handler: src/handlers/auth.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  ingestData:
    handler: src/handlers/analytics.ingestData
    events:
      - http:
          path: analytics/events
          method: post
          cors: true

  getAnalytics:
    handler: src/handlers/analytics.getAnalytics
    events:
      - http:
          path: analytics/data
          method: get
          cors: true

  # Existing WebSocket API functions
  websocketConnect:
    handler: src/handlers/websocket.connectHandler
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: src/handlers/websocket.disconnectHandler
    events:
      - websocket:
          route: $disconnect

  websocketDefault:
    handler: src/handlers/websocket.defaultHandler
    events:
      - websocket:
          route: $default

  # NEW: User Management Functions
  getUserProfile:
    handler: lambda/user-management/userManager.getUserProfile
    events:
      - http:
          path: /users/profile
          method: post
          cors: true

  updateUserProfile:
    handler: lambda/user-management/userManager.updateUserProfile
    events:
      - http:
          path: /users/profile/update
          method: put
          cors: true

  getTeamMembers:
    handler: lambda/user-management/userManager.getTeamMembers
    events:
      - http:
          path: /teams/{tenantId}/members
          method: get
          cors: true

  inviteUser:
    handler: lambda/user-management/invitations.inviteUser
    events:
      - http:
          path: /teams/invite
          method: post
          cors: true

  acceptInvitation:
    handler: lambda/user-management/invitations.acceptInvitation
    events:
      - http:
          path: /teams/accept-invitation
          method: post
          cors: true

  getAuditLogs:
    handler: lambda/user-management/auditLogs.getAuditLogs
    events:
      - http:
          path: /audit/{tenantId}/logs
          method: get
          cors: true

  getAuditStats:
    handler: lambda/user-management/auditLogs.getAuditStats
    events:
      - http:
          path: /audit/{tenantId}/stats
          method: get
          cors: true

resources:
  Resources:
    TenantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TENANTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH

    AnalyticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ANALYTICS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE

    # WebSocket Connections Table
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    # User Profiles Table
    UserProfilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-user-profiles-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tenantId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TenantIndex
            KeySchema:
              - AttributeName: tenantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Team Invitations Table
    TeamInvitationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-team-invitations-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: invitationId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: tenantId
            AttributeType: S
        KeySchema:
          - AttributeName: invitationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: TenantIndex
            KeySchema:
              - AttributeName: tenantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Audit Logs Table  
    AuditLogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-audit-logs-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: logId
            AttributeType: S
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: logId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TenantTimeIndex
            KeySchema:
              - AttributeName: tenantId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
