{
  "D:\\analytics-platform\\backend\\serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "D:\\analytics-platform\\backend\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "analytics-platform",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "stage": "dev",
        "environment": {
          "TENANTS_TABLE": "analytics-platform-dev-tenants",
          "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
          "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
          "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
          "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
          "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
          "JWT_SECRET": "<REDACTED>",
          "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
          "FROM_EMAIL": "noreply@analytics-platform.com"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem"
            ],
            "Resource": "arn:aws:dynamodb:us-east-1:*:table/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "execute-api:ManageConnections"
            ],
            "Resource": "arn:aws:execute-api:us-east-1:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ses:SendEmail",
              "ses:SendRawEmail"
            ],
            "Resource": "*"
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "HelloLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-hello"
              }
            },
            "RegisterLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-register"
              }
            },
            "LoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-login"
              }
            },
            "IngestDataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-ingestData"
              }
            },
            "GetAnalyticsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-getAnalytics"
              }
            },
            "WebsocketConnectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketConnect"
              }
            },
            "WebsocketDisconnectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDisconnect"
              }
            },
            "WebsocketDefaultLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDefault"
              }
            },
            "GetUserProfileLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-getUserProfile"
              }
            },
            "UpdateUserProfileLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-updateUserProfile"
              }
            },
            "GetTeamMembersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-getTeamMembers"
              }
            },
            "InviteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-inviteUser"
              }
            },
            "AcceptInvitationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-acceptInvitation"
              }
            },
            "GetAuditLogsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditLogs"
              }
            },
            "GetAuditStatsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditStats"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "analytics-platform",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": "arn:aws:dynamodb:us-east-1:*:table/*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "execute-api:ManageConnections"
                          ],
                          "Resource": "arn:aws:execute-api:us-east-1:*:*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "ses:SendEmail",
                            "ses:SendRawEmail"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "execute-api:ManageConnections"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "analytics-platform",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "HelloLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/hello.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-hello",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HelloLogGroup"
              ]
            },
            "RegisterLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/auth.register",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-register",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RegisterLogGroup"
              ]
            },
            "LoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/auth.login",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-login",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LoginLogGroup"
              ]
            },
            "IngestDataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/analytics.ingestData",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-ingestData",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "IngestDataLogGroup"
              ]
            },
            "GetAnalyticsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/analytics.getAnalytics",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-getAnalytics",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAnalyticsLogGroup"
              ]
            },
            "WebsocketConnectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/websocket.connectHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-websocketConnect",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WebsocketConnectLogGroup"
              ]
            },
            "WebsocketDisconnectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/websocket.disconnectHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-websocketDisconnect",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WebsocketDisconnectLogGroup"
              ]
            },
            "WebsocketDefaultLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "src/handlers/websocket.defaultHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-websocketDefault",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "WebsocketDefaultLogGroup"
              ]
            },
            "GetUserProfileLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/userManager.getUserProfile",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-getUserProfile",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserProfileLogGroup"
              ]
            },
            "UpdateUserProfileLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/userManager.updateUserProfile",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-updateUserProfile",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserProfileLogGroup"
              ]
            },
            "GetTeamMembersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/userManager.getTeamMembers",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-getTeamMembers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTeamMembersLogGroup"
              ]
            },
            "InviteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/invitations.inviteUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-inviteUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "InviteUserLogGroup"
              ]
            },
            "AcceptInvitationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/invitations.acceptInvitation",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-acceptInvitation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AcceptInvitationLogGroup"
              ]
            },
            "GetAuditLogsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/auditLogs.getAuditLogs",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-getAuditLogs",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAuditLogsLogGroup"
              ]
            },
            "GetAuditStatsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                  "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
                },
                "Handler": "lambda/user-management/auditLogs.getAuditStats",
                "Runtime": "nodejs18.x",
                "FunctionName": "analytics-platform-dev-getAuditStats",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TENANTS_TABLE": "analytics-platform-dev-tenants",
                    "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                    "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                    "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                    "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                    "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                    "JWT_SECRET": "<REDACTED>",
                    "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                    "FROM_EMAIL": "noreply@analytics-platform.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAuditStatsLogGroup"
              ]
            },
            "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HelloLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegisterLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "IngestDataLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAnalyticsLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WebsocketConnectLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WebsocketDisconnectLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "WebsocketDefaultLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserProfileLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserProfileLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTeamMembersLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "InviteUserLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AcceptInvitationLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAuditLogsLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAuditStatsLambdaFunction"
                },
                "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-analytics-platform",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceHello": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "hello",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthRegister": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "register",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAnalytics": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "analytics",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAnalyticsEvents": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAnalytics"
                },
                "PathPart": "events",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAnalyticsData": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAnalytics"
                },
                "PathPart": "data",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersProfile": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "profile",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersProfileUpdate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsersProfile"
                },
                "PathPart": "update",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTeams": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "teams",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTeamsTenantidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceTeams"
                },
                "PathPart": "{tenantId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTeamsTenantidVarMembers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceTeamsTenantidVar"
                },
                "PathPart": "members",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTeamsInvite": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceTeams"
                },
                "PathPart": "invite",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceTeamsAcceptDashinvitation": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceTeams"
                },
                "PathPart": "accept-invitation",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAudit": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "audit",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuditTenantidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAudit"
                },
                "PathPart": "{tenantId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuditTenantidVarLogs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuditTenantidVar"
                },
                "PathPart": "logs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuditTenantidVarStats": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuditTenantidVar"
                },
                "PathPart": "stats",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHelloOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHello"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthRegisterOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuthLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAnalyticsEventsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAnalyticsEvents"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAnalyticsDataOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAnalyticsData"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersProfileOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersProfile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersProfileUpdateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersProfileUpdate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTeamsTenantidVarMembersOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTeamsInviteOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTeamsInvite"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodTeamsAcceptDashinvitationOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuditTenantidVarLogsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAuditTenantidVarStatsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuditTenantidVarStats"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodHelloGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceHello"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "HelloLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "HelloLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthRegisterPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RegisterLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RegisterLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LoginLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LoginLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAnalyticsEventsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAnalyticsEvents"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "IngestDataLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "IngestDataLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAnalyticsDataGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAnalyticsData"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAnalyticsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAnalyticsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersProfilePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersProfile"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserProfileLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserProfileLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUsersProfileUpdatePut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersProfileUpdate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserProfileLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateUserProfileLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodTeamsTenantidVarMembersGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetTeamMembersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetTeamMembersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodTeamsInvitePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTeamsInvite"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "InviteUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "InviteUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodTeamsAcceptDashinvitationPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AcceptInvitationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AcceptInvitationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuditTenantidVarLogsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAuditLogsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAuditLogsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuditTenantidVarStatsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuditTenantidVarStats"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAuditStatsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAuditStatsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1758521355304": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodHelloOptions",
                "ApiGatewayMethodAuthRegisterOptions",
                "ApiGatewayMethodAuthLoginOptions",
                "ApiGatewayMethodAnalyticsEventsOptions",
                "ApiGatewayMethodAnalyticsDataOptions",
                "ApiGatewayMethodUsersProfileOptions",
                "ApiGatewayMethodUsersProfileUpdateOptions",
                "ApiGatewayMethodTeamsTenantidVarMembersOptions",
                "ApiGatewayMethodTeamsInviteOptions",
                "ApiGatewayMethodTeamsAcceptDashinvitationOptions",
                "ApiGatewayMethodAuditTenantidVarLogsOptions",
                "ApiGatewayMethodAuditTenantidVarStatsOptions",
                "ApiGatewayMethodHelloGet",
                "ApiGatewayMethodAuthRegisterPost",
                "ApiGatewayMethodAuthLoginPost",
                "ApiGatewayMethodAnalyticsEventsPost",
                "ApiGatewayMethodAnalyticsDataGet",
                "ApiGatewayMethodUsersProfilePost",
                "ApiGatewayMethodUsersProfileUpdatePut",
                "ApiGatewayMethodTeamsTenantidVarMembersGet",
                "ApiGatewayMethodTeamsInvitePost",
                "ApiGatewayMethodTeamsAcceptDashinvitationPost",
                "ApiGatewayMethodAuditTenantidVarLogsGet",
                "ApiGatewayMethodAuditTenantidVarStatsGet"
              ]
            },
            "HelloLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HelloLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RegisterLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LoginLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "IngestDataLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "IngestDataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAnalyticsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAnalyticsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserProfileLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserProfileLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetTeamMembersLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTeamMembersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "InviteUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "InviteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AcceptInvitationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AcceptInvitationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAuditLogsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAuditLogsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAuditStatsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAuditStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "WebsocketsApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-analytics-platform-websockets",
                "RouteSelectionExpression": "$request.body.action",
                "Description": "Serverless Websockets",
                "ProtocolType": "WEBSOCKET"
              }
            },
            "WebsocketConnectWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebsocketConnectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WebsocketDisconnectWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebsocketDisconnectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WebsocketDefaultWebsocketsIntegration": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebsocketDefaultLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              }
            },
            "WebsocketConnectLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WebsocketConnectLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WebsocketConnectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "WebsocketDisconnectLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WebsocketDisconnectLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WebsocketDisconnectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "WebsocketDefaultLambdaPermissionWebsockets": {
              "Type": "AWS::Lambda::Permission",
              "DependsOn": [
                "WebsocketsApi",
                "WebsocketDefaultLambdaFunction"
              ],
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "WebsocketDefaultLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
              }
            },
            "SconnectWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$connect",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WebsocketConnectWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "SdisconnectWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$disconnect",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WebsocketDisconnectWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "SdefaultWebsocketsRoute": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "RouteKey": "$default",
                "AuthorizationType": "NONE",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "WebsocketDefaultWebsocketsIntegration"
                      }
                    ]
                  ]
                }
              }
            },
            "WebsocketsDeploymentStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "StageName": "dev",
                "Description": "Serverless Websockets",
                "DeploymentId": {
                  "Ref": "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM"
                }
              }
            },
            "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM": {
              "Type": "AWS::ApiGatewayV2::Deployment",
              "DependsOn": [
                "SconnectWebsocketsRoute",
                "SdisconnectWebsocketsRoute",
                "SdefaultWebsocketsRoute"
              ],
              "Properties": {
                "ApiId": {
                  "Ref": "WebsocketsApi"
                },
                "Description": "Serverless Websockets"
              }
            },
            "TenantsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "analytics-platform-dev-tenants",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "tenantId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "tenantId",
                    "KeyType": "HASH"
                  }
                ]
              }
            },
            "AnalyticsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "analytics-platform-dev-analytics",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "tenantId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "timestamp",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "tenantId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "RANGE"
                  }
                ]
              }
            },
            "ConnectionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "analytics-platform-dev-connections",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "connectionId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "connectionId",
                    "KeyType": "HASH"
                  }
                ],
                "TimeToLiveSpecification": {
                  "AttributeName": "ttl",
                  "Enabled": true
                }
              }
            },
            "UserProfilesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "analytics-platform-user-profiles-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "tenantId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "TenantIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "tenantId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "TeamInvitationsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "analytics-platform-team-invitations-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "invitationId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "email",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "tenantId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "invitationId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "EmailIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "email",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "TenantIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "tenantId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "AuditLogsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "analytics-platform-audit-logs-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "logId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "tenantId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "timestamp",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "logId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "TenantTimeIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "tenantId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "Export": {
                "Name": "sls-analytics-platform-dev-ServerlessDeploymentBucketName"
              }
            },
            "HelloLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-HelloLambdaFunctionQualifiedArn"
              }
            },
            "RegisterLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-RegisterLambdaFunctionQualifiedArn"
              }
            },
            "LoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-LoginLambdaFunctionQualifiedArn"
              }
            },
            "IngestDataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-IngestDataLambdaFunctionQualifiedArn"
              }
            },
            "GetAnalyticsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-GetAnalyticsLambdaFunctionQualifiedArn"
              }
            },
            "WebsocketConnectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-WebsocketConnectLambdaFunctionQualifiedArn"
              }
            },
            "WebsocketDisconnectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-WebsocketDisconnectLambdaFunctionQualifiedArn"
              }
            },
            "WebsocketDefaultLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-WebsocketDefaultLambdaFunctionQualifiedArn"
              }
            },
            "GetUserProfileLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-GetUserProfileLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserProfileLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-UpdateUserProfileLambdaFunctionQualifiedArn"
              }
            },
            "GetTeamMembersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-GetTeamMembersLambdaFunctionQualifiedArn"
              }
            },
            "InviteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-InviteUserLambdaFunctionQualifiedArn"
              }
            },
            "AcceptInvitationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-AcceptInvitationLambdaFunctionQualifiedArn"
              }
            },
            "GetAuditLogsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-GetAuditLogsLambdaFunctionQualifiedArn"
              }
            },
            "GetAuditStatsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY"
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-GetAuditStatsLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-ServiceEndpoint"
              }
            },
            "ServiceEndpointWebsocket": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "wss://",
                    {
                      "Ref": "WebsocketsApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-analytics-platform-dev-ServiceEndpointWebsocket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "hello": {
          "handler": "src/handlers/hello.handler",
          "events": [
            {
              "http": {
                "path": "hello",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-hello",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU"
        },
        "register": {
          "handler": "src/handlers/auth.register",
          "events": [
            {
              "http": {
                "path": "auth/register",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-register",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs"
        },
        "login": {
          "handler": "src/handlers/auth.login",
          "events": [
            {
              "http": {
                "path": "auth/login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-login",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q"
        },
        "ingestData": {
          "handler": "src/handlers/analytics.ingestData",
          "events": [
            {
              "http": {
                "path": "analytics/events",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-ingestData",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c"
        },
        "getAnalytics": {
          "handler": "src/handlers/analytics.getAnalytics",
          "events": [
            {
              "http": {
                "path": "analytics/data",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-getAnalytics",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es"
        },
        "websocketConnect": {
          "handler": "src/handlers/websocket.connectHandler",
          "events": [
            {
              "websocket": {
                "route": "$connect"
              }
            }
          ],
          "name": "analytics-platform-dev-websocketConnect",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA"
        },
        "websocketDisconnect": {
          "handler": "src/handlers/websocket.disconnectHandler",
          "events": [
            {
              "websocket": {
                "route": "$disconnect"
              }
            }
          ],
          "name": "analytics-platform-dev-websocketDisconnect",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA"
        },
        "websocketDefault": {
          "handler": "src/handlers/websocket.defaultHandler",
          "events": [
            {
              "websocket": {
                "route": "$default"
              }
            }
          ],
          "name": "analytics-platform-dev-websocketDefault",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE"
        },
        "getUserProfile": {
          "handler": "lambda/user-management/userManager.getUserProfile",
          "events": [
            {
              "http": {
                "path": "users/profile",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-getUserProfile",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk"
        },
        "updateUserProfile": {
          "handler": "lambda/user-management/userManager.updateUserProfile",
          "events": [
            {
              "http": {
                "path": "users/profile/update",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-updateUserProfile",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM"
        },
        "getTeamMembers": {
          "handler": "lambda/user-management/userManager.getTeamMembers",
          "events": [
            {
              "http": {
                "path": "teams/{tenantId}/members",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-getTeamMembers",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0"
        },
        "inviteUser": {
          "handler": "lambda/user-management/invitations.inviteUser",
          "events": [
            {
              "http": {
                "path": "teams/invite",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-inviteUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA"
        },
        "acceptInvitation": {
          "handler": "lambda/user-management/invitations.acceptInvitation",
          "events": [
            {
              "http": {
                "path": "teams/accept-invitation",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-acceptInvitation",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA"
        },
        "getAuditLogs": {
          "handler": "lambda/user-management/auditLogs.getAuditLogs",
          "events": [
            {
              "http": {
                "path": "audit/{tenantId}/logs",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-getAuditLogs",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU"
        },
        "getAuditStats": {
          "handler": "lambda/user-management/auditLogs.getAuditStats",
          "events": [
            {
              "http": {
                "path": "audit/{tenantId}/stats",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "analytics-platform-dev-getAuditStats",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY"
        }
      },
      "resources": {
        "Resources": {
          "TenantsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-dev-tenants",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenantId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "AnalyticsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-dev-analytics",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenantId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "ConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-dev-connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "UserProfilesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-user-profiles-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TenantIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tenantId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TeamInvitationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-team-invitations-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "invitationId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "invitationId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "TenantIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tenantId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AuditLogsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-audit-logs-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "logId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "logId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TenantTimeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tenantId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      },
      "plugins": [
        "serverless-offline"
      ]
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "stage": "dev",
      "environment": {
        "TENANTS_TABLE": "analytics-platform-dev-tenants",
        "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
        "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
        "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
        "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
        "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
        "JWT_SECRET": "<REDACTED>",
        "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
        "FROM_EMAIL": "noreply@analytics-platform.com"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:*:table/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "execute-api:ManageConnections"
          ],
          "Resource": "arn:aws:execute-api:us-east-1:*:*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ses:SendEmail",
            "ses:SendRawEmail"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-hello"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-register"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-login"
            }
          },
          "IngestDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-ingestData"
            }
          },
          "GetAnalyticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-getAnalytics"
            }
          },
          "WebsocketConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketConnect"
            }
          },
          "WebsocketDisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDisconnect"
            }
          },
          "WebsocketDefaultLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDefault"
            }
          },
          "GetUserProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-getUserProfile"
            }
          },
          "UpdateUserProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-updateUserProfile"
            }
          },
          "GetTeamMembersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-getTeamMembers"
            }
          },
          "InviteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-inviteUser"
            }
          },
          "AcceptInvitationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-acceptInvitation"
            }
          },
          "GetAuditLogsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditLogs"
            }
          },
          "GetAuditStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditStats"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "analytics-platform",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": "arn:aws:dynamodb:us-east-1:*:table/*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": "arn:aws:execute-api:us-east-1:*:*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ses:SendEmail",
                          "ses:SendRawEmail"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "analytics-platform",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/hello.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-hello",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/auth.register",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/auth.login",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "IngestDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/analytics.ingestData",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-ingestData",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IngestDataLogGroup"
            ]
          },
          "GetAnalyticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/analytics.getAnalytics",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-getAnalytics",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAnalyticsLogGroup"
            ]
          },
          "WebsocketConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/websocket.connectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-websocketConnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WebsocketConnectLogGroup"
            ]
          },
          "WebsocketDisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/websocket.disconnectHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-websocketDisconnect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WebsocketDisconnectLogGroup"
            ]
          },
          "WebsocketDefaultLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "src/handlers/websocket.defaultHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-websocketDefault",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WebsocketDefaultLogGroup"
            ]
          },
          "GetUserProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/userManager.getUserProfile",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-getUserProfile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserProfileLogGroup"
            ]
          },
          "UpdateUserProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/userManager.updateUserProfile",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-updateUserProfile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserProfileLogGroup"
            ]
          },
          "GetTeamMembersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/userManager.getTeamMembers",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-getTeamMembers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTeamMembersLogGroup"
            ]
          },
          "InviteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/invitations.inviteUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-inviteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InviteUserLogGroup"
            ]
          },
          "AcceptInvitationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/invitations.acceptInvitation",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-acceptInvitation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AcceptInvitationLogGroup"
            ]
          },
          "GetAuditLogsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/auditLogs.getAuditLogs",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-getAuditLogs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAuditLogsLogGroup"
            ]
          },
          "GetAuditStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
                "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
              },
              "Handler": "lambda/user-management/auditLogs.getAuditStats",
              "Runtime": "nodejs18.x",
              "FunctionName": "analytics-platform-dev-getAuditStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TENANTS_TABLE": "analytics-platform-dev-tenants",
                  "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                  "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                  "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                  "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                  "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                  "JWT_SECRET": "<REDACTED>",
                  "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                  "FROM_EMAIL": "noreply@analytics-platform.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAuditStatsLogGroup"
            ]
          },
          "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IngestDataLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAnalyticsLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebsocketConnectLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebsocketDisconnectLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebsocketDefaultLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserProfileLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserProfileLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTeamMembersLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InviteUserLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AcceptInvitationLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAuditLogsLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAuditStatsLambdaFunction"
              },
              "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-analytics-platform",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAnalytics": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "analytics",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAnalyticsEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAnalytics"
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAnalyticsData": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAnalytics"
              },
              "PathPart": "data",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersProfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "profile",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersProfileUpdate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsersProfile"
              },
              "PathPart": "update",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeams": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "teams",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeamsTenantidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTeams"
              },
              "PathPart": "{tenantId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeamsTenantidVarMembers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTeamsTenantidVar"
              },
              "PathPart": "members",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeamsInvite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTeams"
              },
              "PathPart": "invite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTeamsAcceptDashinvitation": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTeams"
              },
              "PathPart": "accept-invitation",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAudit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "audit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuditTenantidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAudit"
              },
              "PathPart": "{tenantId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuditTenantidVarLogs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuditTenantidVar"
              },
              "PathPart": "logs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuditTenantidVarStats": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuditTenantidVar"
              },
              "PathPart": "stats",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthRegisterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAnalyticsEventsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnalyticsEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAnalyticsDataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnalyticsData"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersProfileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersProfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersProfileUpdateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersProfileUpdate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTeamsTenantidVarMembersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTeamsInviteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamsInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTeamsAcceptDashinvitationOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuditTenantidVarLogsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuditTenantidVarStatsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuditTenantidVarStats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HelloLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAnalyticsEventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnalyticsEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IngestDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "IngestDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAnalyticsDataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAnalyticsData"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAnalyticsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAnalyticsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersProfilePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersProfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserProfileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserProfileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersProfileUpdatePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersProfileUpdate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserProfileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserProfileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTeamsTenantidVarMembersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTeamMembersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTeamMembersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTeamsInvitePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamsInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "InviteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "InviteUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTeamsAcceptDashinvitationPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AcceptInvitationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AcceptInvitationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuditTenantidVarLogsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAuditLogsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAuditLogsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuditTenantidVarStatsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuditTenantidVarStats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAuditStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAuditStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1758521355304": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloOptions",
              "ApiGatewayMethodAuthRegisterOptions",
              "ApiGatewayMethodAuthLoginOptions",
              "ApiGatewayMethodAnalyticsEventsOptions",
              "ApiGatewayMethodAnalyticsDataOptions",
              "ApiGatewayMethodUsersProfileOptions",
              "ApiGatewayMethodUsersProfileUpdateOptions",
              "ApiGatewayMethodTeamsTenantidVarMembersOptions",
              "ApiGatewayMethodTeamsInviteOptions",
              "ApiGatewayMethodTeamsAcceptDashinvitationOptions",
              "ApiGatewayMethodAuditTenantidVarLogsOptions",
              "ApiGatewayMethodAuditTenantidVarStatsOptions",
              "ApiGatewayMethodHelloGet",
              "ApiGatewayMethodAuthRegisterPost",
              "ApiGatewayMethodAuthLoginPost",
              "ApiGatewayMethodAnalyticsEventsPost",
              "ApiGatewayMethodAnalyticsDataGet",
              "ApiGatewayMethodUsersProfilePost",
              "ApiGatewayMethodUsersProfileUpdatePut",
              "ApiGatewayMethodTeamsTenantidVarMembersGet",
              "ApiGatewayMethodTeamsInvitePost",
              "ApiGatewayMethodTeamsAcceptDashinvitationPost",
              "ApiGatewayMethodAuditTenantidVarLogsGet",
              "ApiGatewayMethodAuditTenantidVarStatsGet"
            ]
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "IngestDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IngestDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAnalyticsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAnalyticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserProfileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserProfileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTeamMembersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTeamMembersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "InviteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InviteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AcceptInvitationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AcceptInvitationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAuditLogsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAuditLogsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAuditStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAuditStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-analytics-platform-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "WebsocketConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WebsocketConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WebsocketDisconnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WebsocketDisconnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WebsocketDefaultWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WebsocketDefaultLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WebsocketConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WebsocketConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebsocketConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WebsocketDisconnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WebsocketDisconnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebsocketDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WebsocketDefaultLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WebsocketDefaultLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebsocketDefaultLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketDisconnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WebsocketDefaultWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM"
              }
            }
          },
          "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "TenantsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-dev-tenants",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenantId",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "AnalyticsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-dev-analytics",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tenantId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "ConnectionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-dev-connections",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "connectionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "connectionId",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "UserProfilesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-user-profiles-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TenantIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tenantId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TeamInvitationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-team-invitations-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "invitationId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "invitationId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "TenantIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tenantId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AuditLogsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "analytics-platform-audit-logs-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "logId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tenantId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "logId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "TenantTimeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tenantId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-982a0670-55d2",
            "Export": {
              "Name": "sls-analytics-platform-dev-ServerlessDeploymentBucketName"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-HelloLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "IngestDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-IngestDataLambdaFunctionQualifiedArn"
            }
          },
          "GetAnalyticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-GetAnalyticsLambdaFunctionQualifiedArn"
            }
          },
          "WebsocketConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-WebsocketConnectLambdaFunctionQualifiedArn"
            }
          },
          "WebsocketDisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-WebsocketDisconnectLambdaFunctionQualifiedArn"
            }
          },
          "WebsocketDefaultLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-WebsocketDefaultLambdaFunctionQualifiedArn"
            }
          },
          "GetUserProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-GetUserProfileLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-UpdateUserProfileLambdaFunctionQualifiedArn"
            }
          },
          "GetTeamMembersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-GetTeamMembersLambdaFunctionQualifiedArn"
            }
          },
          "InviteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-InviteUserLambdaFunctionQualifiedArn"
            }
          },
          "AcceptInvitationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-AcceptInvitationLambdaFunctionQualifiedArn"
            }
          },
          "GetAuditLogsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-GetAuditLogsLambdaFunctionQualifiedArn"
            }
          },
          "GetAuditStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY"
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-GetAuditStatsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-ServiceEndpoint"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-analytics-platform-dev-ServiceEndpointWebsocket"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: analytics-platform\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  region: us-east-1\r\n  stage: dev\r\n  environment:\r\n    TENANTS_TABLE: ${self:service}-${self:provider.stage}-tenants\r\n    ANALYTICS_TABLE: ${self:service}-${self:provider.stage}-analytics\r\n    CONNECTIONS_TABLE: ${self:service}-${self:provider.stage}-connections\r\n    USER_PROFILES_TABLE: ${self:service}-user-profiles-${self:provider.stage}\r\n    TEAM_INVITATIONS_TABLE: ${self:service}-team-invitations-${self:provider.stage}\r\n    AUDIT_LOGS_TABLE: ${self:service}-audit-logs-${self:provider.stage}\r\n    JWT_SECRET: ${env:JWT_SECRET, 'your-super-secret-jwt-key-change-in-production'}\r\n    FRONTEND_URL: https://euphonious-cheesecake-ef9aec.netlify.app\r\n    FROM_EMAIL: noreply@analytics-platform.com\r\n  \r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:Query\r\n        - dynamodb:Scan\r\n        - dynamodb:GetItem\r\n        - dynamodb:PutItem\r\n        - dynamodb:UpdateItem\r\n        - dynamodb:DeleteItem\r\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/*\"\r\n    - Effect: Allow\r\n      Action:\r\n        - execute-api:ManageConnections\r\n      Resource: \"arn:aws:execute-api:${self:provider.region}:*:*\"\r\n    - Effect: Allow\r\n      Action:\r\n        - ses:SendEmail\r\n        - ses:SendRawEmail\r\n      Resource: \"*\"\r\n\r\nfunctions:\r\n  # Existing HTTP API functions\r\n  hello:\r\n    handler: src/handlers/hello.handler\r\n    events:\r\n      - http:\r\n          path: hello\r\n          method: get\r\n          cors: true\r\n\r\n  register:\r\n    handler: src/handlers/auth.register\r\n    events:\r\n      - http:\r\n          path: auth/register\r\n          method: post\r\n          cors: true\r\n\r\n  login:\r\n    handler: src/handlers/auth.login\r\n    events:\r\n      - http:\r\n          path: auth/login\r\n          method: post\r\n          cors: true\r\n\r\n  ingestData:\r\n    handler: src/handlers/analytics.ingestData\r\n    events:\r\n      - http:\r\n          path: analytics/events\r\n          method: post\r\n          cors: true\r\n\r\n  getAnalytics:\r\n    handler: src/handlers/analytics.getAnalytics\r\n    events:\r\n      - http:\r\n          path: analytics/data\r\n          method: get\r\n          cors: true\r\n\r\n  # Existing WebSocket API functions\r\n  websocketConnect:\r\n    handler: src/handlers/websocket.connectHandler\r\n    events:\r\n      - websocket:\r\n          route: $connect\r\n\r\n  websocketDisconnect:\r\n    handler: src/handlers/websocket.disconnectHandler\r\n    events:\r\n      - websocket:\r\n          route: $disconnect\r\n\r\n  websocketDefault:\r\n    handler: src/handlers/websocket.defaultHandler\r\n    events:\r\n      - websocket:\r\n          route: $default\r\n\r\n  # NEW: User Management Functions\r\n  getUserProfile:\r\n    handler: lambda/user-management/userManager.getUserProfile\r\n    events:\r\n      - http:\r\n          path: /users/profile\r\n          method: post\r\n          cors: true\r\n\r\n  updateUserProfile:\r\n    handler: lambda/user-management/userManager.updateUserProfile\r\n    events:\r\n      - http:\r\n          path: /users/profile/update\r\n          method: put\r\n          cors: true\r\n\r\n  getTeamMembers:\r\n    handler: lambda/user-management/userManager.getTeamMembers\r\n    events:\r\n      - http:\r\n          path: /teams/{tenantId}/members\r\n          method: get\r\n          cors: true\r\n\r\n  inviteUser:\r\n    handler: lambda/user-management/invitations.inviteUser\r\n    events:\r\n      - http:\r\n          path: /teams/invite\r\n          method: post\r\n          cors: true\r\n\r\n  acceptInvitation:\r\n    handler: lambda/user-management/invitations.acceptInvitation\r\n    events:\r\n      - http:\r\n          path: /teams/accept-invitation\r\n          method: post\r\n          cors: true\r\n\r\n  getAuditLogs:\r\n    handler: lambda/user-management/auditLogs.getAuditLogs\r\n    events:\r\n      - http:\r\n          path: /audit/{tenantId}/logs\r\n          method: get\r\n          cors: true\r\n\r\n  getAuditStats:\r\n    handler: lambda/user-management/auditLogs.getAuditStats\r\n    events:\r\n      - http:\r\n          path: /audit/{tenantId}/stats\r\n          method: get\r\n          cors: true\r\n\r\nresources:\r\n  Resources:\r\n    TenantsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.TENANTS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: tenantId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: tenantId\r\n            KeyType: HASH\r\n\r\n    AnalyticsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.ANALYTICS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: tenantId\r\n            AttributeType: S\r\n          - AttributeName: timestamp\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: tenantId\r\n            KeyType: HASH\r\n          - AttributeName: timestamp\r\n            KeyType: RANGE\r\n\r\n    # WebSocket Connections Table\r\n    ConnectionsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:provider.environment.CONNECTIONS_TABLE}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: connectionId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: connectionId\r\n            KeyType: HASH\r\n        TimeToLiveSpecification:\r\n          AttributeName: ttl\r\n          Enabled: true\r\n\r\n    # User Profiles Table\r\n    UserProfilesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-user-profiles-${self:provider.stage}\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: tenantId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: TenantIndex\r\n            KeySchema:\r\n              - AttributeName: tenantId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    # Team Invitations Table\r\n    TeamInvitationsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-team-invitations-${self:provider.stage}\r\n        AttributeDefinitions:\r\n          - AttributeName: invitationId\r\n            AttributeType: S\r\n          - AttributeName: email\r\n            AttributeType: S\r\n          - AttributeName: tenantId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: invitationId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: EmailIndex\r\n            KeySchema:\r\n              - AttributeName: email\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n          - IndexName: TenantIndex\r\n            KeySchema:\r\n              - AttributeName: tenantId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    # Audit Logs Table  \r\n    AuditLogsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-audit-logs-${self:provider.stage}\r\n        AttributeDefinitions:\r\n          - AttributeName: logId\r\n            AttributeType: S\r\n          - AttributeName: tenantId\r\n            AttributeType: S\r\n          - AttributeName: timestamp\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: logId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: TenantTimeIndex\r\n            KeySchema:\r\n              - AttributeName: tenantId\r\n                KeyType: HASH\r\n              - AttributeName: timestamp\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\nplugins:\r\n  - serverless-offline\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "ce985c05-8e25-4c81-860a-23da04de6500",
    "orgName": "abhinavdev",
    "userId": "zhlLDwZrmmNy4BttSW",
    "userName": "abhinavdev",
    "serviceProviderAwsAccountId": "783495884441",
    "serviceProviderAwsCfStackName": "analytics-platform-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:783495884441:stack/analytics-platform-dev/e4b5a3a0-8955-11f0-a5d5-0affcb96c545",
    "serviceProviderAwsCfStackCreated": "2025-09-04T06:10:45.246Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-14T12:45:48.051Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "IngestDataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-ingestData:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-IngestDataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "WebsocketDisconnectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-websocketDisconnect:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-WebsocketDisconnectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "WebsocketConnectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-websocketConnect:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-WebsocketConnectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RegisterLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-register:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-RegisterLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "WebsocketDefaultLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-websocketDefault:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-WebsocketDefaultLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HelloLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-hello:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-HelloLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-login:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-LoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAnalyticsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:783495884441:function:analytics-platform-dev-getAnalytics:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-analytics-platform-dev-GetAnalyticsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://1p8kqmg51i.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-analytics-platform-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServiceEndpointWebsocket",
        "OutputValue": "wss://q6s7133e0e.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-analytics-platform-dev-ServiceEndpointWebsocket"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-982a0670-55d2",
        "ExportName": "sls-analytics-platform-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "HelloLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-hello"
          }
        },
        "RegisterLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-register"
          }
        },
        "LoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-login"
          }
        },
        "IngestDataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-ingestData"
          }
        },
        "GetAnalyticsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-getAnalytics"
          }
        },
        "WebsocketConnectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketConnect"
          }
        },
        "WebsocketDisconnectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDisconnect"
          }
        },
        "WebsocketDefaultLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDefault"
          }
        },
        "GetUserProfileLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-getUserProfile"
          }
        },
        "UpdateUserProfileLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-updateUserProfile"
          }
        },
        "GetTeamMembersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-getTeamMembers"
          }
        },
        "InviteUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-inviteUser"
          }
        },
        "AcceptInvitationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-acceptInvitation"
          }
        },
        "GetAuditLogsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditLogs"
          }
        },
        "GetAuditStatsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditStats"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "analytics-platform",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": "arn:aws:dynamodb:us-east-1:*:table/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "execute-api:ManageConnections"
                      ],
                      "Resource": "arn:aws:execute-api:us-east-1:*:*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ses:SendEmail",
                        "ses:SendRawEmail"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "execute-api:ManageConnections"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "analytics-platform",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "HelloLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/hello.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-hello",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HelloLogGroup"
          ]
        },
        "RegisterLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/auth.register",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-register",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "RegisterLogGroup"
          ]
        },
        "LoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/auth.login",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-login",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LoginLogGroup"
          ]
        },
        "IngestDataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/analytics.ingestData",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-ingestData",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "IngestDataLogGroup"
          ]
        },
        "GetAnalyticsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/analytics.getAnalytics",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-getAnalytics",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAnalyticsLogGroup"
          ]
        },
        "WebsocketConnectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/websocket.connectHandler",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-websocketConnect",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WebsocketConnectLogGroup"
          ]
        },
        "WebsocketDisconnectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/websocket.disconnectHandler",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-websocketDisconnect",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WebsocketDisconnectLogGroup"
          ]
        },
        "WebsocketDefaultLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "src/handlers/websocket.defaultHandler",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-websocketDefault",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "WebsocketDefaultLogGroup"
          ]
        },
        "GetUserProfileLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/userManager.getUserProfile",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-getUserProfile",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserProfileLogGroup"
          ]
        },
        "UpdateUserProfileLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/userManager.updateUserProfile",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-updateUserProfile",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateUserProfileLogGroup"
          ]
        },
        "GetTeamMembersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/userManager.getTeamMembers",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-getTeamMembers",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetTeamMembersLogGroup"
          ]
        },
        "InviteUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/invitations.inviteUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-inviteUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "InviteUserLogGroup"
          ]
        },
        "AcceptInvitationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/invitations.acceptInvitation",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-acceptInvitation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AcceptInvitationLogGroup"
          ]
        },
        "GetAuditLogsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/auditLogs.getAuditLogs",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-getAuditLogs",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAuditLogsLogGroup"
          ]
        },
        "GetAuditStatsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
              "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
            },
            "Handler": "lambda/user-management/auditLogs.getAuditStats",
            "Runtime": "nodejs18.x",
            "FunctionName": "analytics-platform-dev-getAuditStats",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "TENANTS_TABLE": "analytics-platform-dev-tenants",
                "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
                "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
                "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
                "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
                "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
                "JWT_SECRET": "<REDACTED>",
                "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
                "FROM_EMAIL": "noreply@analytics-platform.com"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAuditStatsLogGroup"
          ]
        },
        "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HelloLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RegisterLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LoginLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "IngestDataLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAnalyticsLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WebsocketConnectLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WebsocketDisconnectLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "WebsocketDefaultLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserProfileLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateUserProfileLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetTeamMembersLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "InviteUserLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AcceptInvitationLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAuditLogsLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAuditStatsLambdaFunction"
            },
            "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-analytics-platform",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceHello": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "hello",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuth": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "auth",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuthRegister": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuth"
            },
            "PathPart": "register",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuthLogin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuth"
            },
            "PathPart": "login",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAnalytics": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "analytics",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAnalyticsEvents": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAnalytics"
            },
            "PathPart": "events",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAnalyticsData": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAnalytics"
            },
            "PathPart": "data",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "users",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsersProfile": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsers"
            },
            "PathPart": "profile",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsersProfileUpdate": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsersProfile"
            },
            "PathPart": "update",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceTeams": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "teams",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceTeamsTenantidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceTeams"
            },
            "PathPart": "{tenantId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceTeamsTenantidVarMembers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceTeamsTenantidVar"
            },
            "PathPart": "members",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceTeamsInvite": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceTeams"
            },
            "PathPart": "invite",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceTeamsAcceptDashinvitation": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceTeams"
            },
            "PathPart": "accept-invitation",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAudit": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "audit",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuditTenantidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAudit"
            },
            "PathPart": "{tenantId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuditTenantidVarLogs": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuditTenantidVar"
            },
            "PathPart": "logs",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAuditTenantidVarStats": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAuditTenantidVar"
            },
            "PathPart": "stats",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodHelloOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceHello"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuthRegisterOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthRegister"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuthLoginOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAnalyticsEventsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAnalyticsEvents"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAnalyticsDataOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAnalyticsData"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsersProfileOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersProfile"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsersProfileUpdateOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersProfileUpdate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodTeamsTenantidVarMembersOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodTeamsInviteOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceTeamsInvite"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodTeamsAcceptDashinvitationOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuditTenantidVarLogsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAuditTenantidVarStatsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuditTenantidVarStats"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodHelloGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceHello"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "HelloLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "HelloLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAuthRegisterPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthRegister"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RegisterLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "RegisterLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAuthLoginPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuthLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "LoginLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "LoginLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAnalyticsEventsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAnalyticsEvents"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "IngestDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "IngestDataLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAnalyticsDataGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAnalyticsData"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetAnalyticsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetAnalyticsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersProfilePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersProfile"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserProfileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserProfileLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUsersProfileUpdatePut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersProfileUpdate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateUserProfileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateUserProfileLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodTeamsTenantidVarMembersGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetTeamMembersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetTeamMembersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodTeamsInvitePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceTeamsInvite"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "InviteUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "InviteUserLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodTeamsAcceptDashinvitationPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AcceptInvitationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AcceptInvitationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAuditTenantidVarLogsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetAuditLogsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetAuditLogsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAuditTenantidVarStatsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAuditTenantidVarStats"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetAuditStatsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetAuditStatsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1758521355304": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodHelloOptions",
            "ApiGatewayMethodAuthRegisterOptions",
            "ApiGatewayMethodAuthLoginOptions",
            "ApiGatewayMethodAnalyticsEventsOptions",
            "ApiGatewayMethodAnalyticsDataOptions",
            "ApiGatewayMethodUsersProfileOptions",
            "ApiGatewayMethodUsersProfileUpdateOptions",
            "ApiGatewayMethodTeamsTenantidVarMembersOptions",
            "ApiGatewayMethodTeamsInviteOptions",
            "ApiGatewayMethodTeamsAcceptDashinvitationOptions",
            "ApiGatewayMethodAuditTenantidVarLogsOptions",
            "ApiGatewayMethodAuditTenantidVarStatsOptions",
            "ApiGatewayMethodHelloGet",
            "ApiGatewayMethodAuthRegisterPost",
            "ApiGatewayMethodAuthLoginPost",
            "ApiGatewayMethodAnalyticsEventsPost",
            "ApiGatewayMethodAnalyticsDataGet",
            "ApiGatewayMethodUsersProfilePost",
            "ApiGatewayMethodUsersProfileUpdatePut",
            "ApiGatewayMethodTeamsTenantidVarMembersGet",
            "ApiGatewayMethodTeamsInvitePost",
            "ApiGatewayMethodTeamsAcceptDashinvitationPost",
            "ApiGatewayMethodAuditTenantidVarLogsGet",
            "ApiGatewayMethodAuditTenantidVarStatsGet"
          ]
        },
        "HelloLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HelloLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "RegisterLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RegisterLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "LoginLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "IngestDataLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "IngestDataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetAnalyticsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAnalyticsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserProfileLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserProfileLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateUserProfileLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateUserProfileLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetTeamMembersLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetTeamMembersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "InviteUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "InviteUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AcceptInvitationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AcceptInvitationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetAuditLogsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAuditLogsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetAuditStatsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAuditStatsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "WebsocketsApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-analytics-platform-websockets",
            "RouteSelectionExpression": "$request.body.action",
            "Description": "Serverless Websockets",
            "ProtocolType": "WEBSOCKET"
          }
        },
        "WebsocketConnectWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WebsocketConnectLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WebsocketDisconnectWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WebsocketDisconnectLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WebsocketDefaultWebsocketsIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "WebsocketDefaultLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            }
          }
        },
        "WebsocketConnectLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WebsocketConnectLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WebsocketConnectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "WebsocketDisconnectLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WebsocketDisconnectLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WebsocketDisconnectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "WebsocketDefaultLambdaPermissionWebsockets": {
          "Type": "AWS::Lambda::Permission",
          "DependsOn": [
            "WebsocketsApi",
            "WebsocketDefaultLambdaFunction"
          ],
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "WebsocketDefaultLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com"
          }
        },
        "SconnectWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$connect",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WebsocketConnectWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "SdisconnectWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$disconnect",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WebsocketDisconnectWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "SdefaultWebsocketsRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "RouteKey": "$default",
            "AuthorizationType": "NONE",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "WebsocketDefaultWebsocketsIntegration"
                  }
                ]
              ]
            }
          }
        },
        "WebsocketsDeploymentStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "StageName": "dev",
            "Description": "Serverless Websockets",
            "DeploymentId": {
              "Ref": "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM"
            }
          }
        },
        "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM": {
          "Type": "AWS::ApiGatewayV2::Deployment",
          "DependsOn": [
            "SconnectWebsocketsRoute",
            "SdisconnectWebsocketsRoute",
            "SdefaultWebsocketsRoute"
          ],
          "Properties": {
            "ApiId": {
              "Ref": "WebsocketsApi"
            },
            "Description": "Serverless Websockets"
          }
        },
        "TenantsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "analytics-platform-dev-tenants",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "tenantId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "tenantId",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "AnalyticsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "analytics-platform-dev-analytics",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "tenantId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "tenantId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ]
          }
        },
        "ConnectionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "analytics-platform-dev-connections",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "connectionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "connectionId",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "UserProfilesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "analytics-platform-user-profiles-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "tenantId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "TenantIndex",
                "KeySchema": [
                  {
                    "AttributeName": "tenantId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "TeamInvitationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "analytics-platform-team-invitations-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "invitationId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              },
              {
                "AttributeName": "tenantId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "invitationId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "EmailIndex",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "TenantIndex",
                "KeySchema": [
                  {
                    "AttributeName": "tenantId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AuditLogsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "analytics-platform-audit-logs-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "logId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "tenantId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "logId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "TenantTimeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "tenantId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "Export": {
            "Name": "sls-analytics-platform-dev-ServerlessDeploymentBucketName"
          }
        },
        "HelloLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-HelloLambdaFunctionQualifiedArn"
          }
        },
        "RegisterLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-RegisterLambdaFunctionQualifiedArn"
          }
        },
        "LoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-LoginLambdaFunctionQualifiedArn"
          }
        },
        "IngestDataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-IngestDataLambdaFunctionQualifiedArn"
          }
        },
        "GetAnalyticsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-GetAnalyticsLambdaFunctionQualifiedArn"
          }
        },
        "WebsocketConnectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-WebsocketConnectLambdaFunctionQualifiedArn"
          }
        },
        "WebsocketDisconnectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-WebsocketDisconnectLambdaFunctionQualifiedArn"
          }
        },
        "WebsocketDefaultLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-WebsocketDefaultLambdaFunctionQualifiedArn"
          }
        },
        "GetUserProfileLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-GetUserProfileLambdaFunctionQualifiedArn"
          }
        },
        "UpdateUserProfileLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-UpdateUserProfileLambdaFunctionQualifiedArn"
          }
        },
        "GetTeamMembersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-GetTeamMembersLambdaFunctionQualifiedArn"
          }
        },
        "InviteUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-InviteUserLambdaFunctionQualifiedArn"
          }
        },
        "AcceptInvitationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-AcceptInvitationLambdaFunctionQualifiedArn"
          }
        },
        "GetAuditLogsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-GetAuditLogsLambdaFunctionQualifiedArn"
          }
        },
        "GetAuditStatsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY"
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-GetAuditStatsLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-ServiceEndpoint"
          }
        },
        "ServiceEndpointWebsocket": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "wss://",
                {
                  "Ref": "WebsocketsApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-analytics-platform-dev-ServiceEndpointWebsocket"
          }
        }
      }
    }
  }
}