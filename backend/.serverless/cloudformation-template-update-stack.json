{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "HelloLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-hello"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-register"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-login"
      }
    },
    "IngestDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-ingestData"
      }
    },
    "GetAnalyticsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-getAnalytics"
      }
    },
    "WebsocketConnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketConnect"
      }
    },
    "WebsocketDisconnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDisconnect"
      }
    },
    "WebsocketDefaultLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-websocketDefault"
      }
    },
    "GetUserProfileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-getUserProfile"
      }
    },
    "UpdateUserProfileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-updateUserProfile"
      }
    },
    "GetTeamMembersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-getTeamMembers"
      }
    },
    "InviteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-inviteUser"
      }
    },
    "AcceptInvitationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-acceptInvitation"
      }
    },
    "GetAuditLogsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditLogs"
      }
    },
    "GetAuditStatsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/analytics-platform-dev-getAuditStats"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "analytics-platform",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/analytics-platform-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": "arn:aws:execute-api:us-east-1:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "analytics-platform",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HelloLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/hello.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-hello",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HelloLogGroup"
      ]
    },
    "RegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/auth.register",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-register",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/auth.login",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "IngestDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/analytics.ingestData",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-ingestData",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IngestDataLogGroup"
      ]
    },
    "GetAnalyticsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/analytics.getAnalytics",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-getAnalytics",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAnalyticsLogGroup"
      ]
    },
    "WebsocketConnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/websocket.connectHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-websocketConnect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsocketConnectLogGroup"
      ]
    },
    "WebsocketDisconnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/websocket.disconnectHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-websocketDisconnect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsocketDisconnectLogGroup"
      ]
    },
    "WebsocketDefaultLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "src/handlers/websocket.defaultHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-websocketDefault",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsocketDefaultLogGroup"
      ]
    },
    "GetUserProfileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/userManager.getUserProfile",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-getUserProfile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserProfileLogGroup"
      ]
    },
    "UpdateUserProfileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/userManager.updateUserProfile",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-updateUserProfile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserProfileLogGroup"
      ]
    },
    "GetTeamMembersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/userManager.getTeamMembers",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-getTeamMembers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTeamMembersLogGroup"
      ]
    },
    "InviteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/invitations.inviteUser",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-inviteUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InviteUserLogGroup"
      ]
    },
    "AcceptInvitationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/invitations.acceptInvitation",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-acceptInvitation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AcceptInvitationLogGroup"
      ]
    },
    "GetAuditLogsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/auditLogs.getAuditLogs",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-getAuditLogs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAuditLogsLogGroup"
      ]
    },
    "GetAuditStatsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-982a0670-55d2",
          "S3Key": "serverless/analytics-platform/dev/1758521389968-2025-09-22T06:09:49.968Z/analytics-platform.zip"
        },
        "Handler": "lambda/user-management/auditLogs.getAuditStats",
        "Runtime": "nodejs18.x",
        "FunctionName": "analytics-platform-dev-getAuditStats",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TENANTS_TABLE": "analytics-platform-dev-tenants",
            "ANALYTICS_TABLE": "analytics-platform-dev-analytics",
            "CONNECTIONS_TABLE": "analytics-platform-dev-connections",
            "USER_PROFILES_TABLE": "analytics-platform-user-profiles-dev",
            "TEAM_INVITATIONS_TABLE": "analytics-platform-team-invitations-dev",
            "AUDIT_LOGS_TABLE": "analytics-platform-audit-logs-dev",
            "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
            "FRONTEND_URL": "https://euphonious-cheesecake-ef9aec.netlify.app",
            "FROM_EMAIL": "noreply@analytics-platform.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAuditStatsLogGroup"
      ]
    },
    "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HelloLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IngestDataLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAnalyticsLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsocketConnectLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsocketDisconnectLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsocketDefaultLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserProfileLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserProfileLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTeamMembersLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InviteUserLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AcceptInvitationLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAuditLogsLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAuditStatsLambdaFunction"
        },
        "CodeSha256": "F5gbvE93AxY5SOjX+sV0RUpk+YHxZxPxmLLcbxZ5MYs="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-analytics-platform",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceHello": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "hello",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthRegister": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "register",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAnalytics": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "analytics",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAnalyticsEvents": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAnalytics"
        },
        "PathPart": "events",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAnalyticsData": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAnalytics"
        },
        "PathPart": "data",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersProfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "PathPart": "profile",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsersProfileUpdate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUsersProfile"
        },
        "PathPart": "update",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTeams": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "teams",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTeamsTenantidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTeams"
        },
        "PathPart": "{tenantId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTeamsTenantidVarMembers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTeamsTenantidVar"
        },
        "PathPart": "members",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTeamsInvite": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTeams"
        },
        "PathPart": "invite",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTeamsAcceptDashinvitation": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTeams"
        },
        "PathPart": "accept-invitation",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAudit": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "audit",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuditTenantidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAudit"
        },
        "PathPart": "{tenantId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuditTenantidVarLogs": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuditTenantidVar"
        },
        "PathPart": "logs",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuditTenantidVarStats": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuditTenantidVar"
        },
        "PathPart": "stats",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHelloOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceHello"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthRegisterOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthLoginOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAnalyticsEventsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnalyticsEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAnalyticsDataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnalyticsData"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersProfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersProfileUpdateOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersProfileUpdate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTeamsTenantidVarMembersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTeamsInviteOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsInvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTeamsAcceptDashinvitationOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuditTenantidVarLogsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuditTenantidVarStatsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuditTenantidVarStats"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHelloGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceHello"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HelloLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HelloLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthRegisterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RegisterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAnalyticsEventsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnalyticsEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IngestDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "IngestDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAnalyticsDataGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnalyticsData"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAnalyticsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAnalyticsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersProfilePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserProfileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersProfileUpdatePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsersProfileUpdate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateUserProfileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTeamsTenantidVarMembersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsTenantidVarMembers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTeamMembersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTeamMembersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTeamsInvitePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsInvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InviteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "InviteUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTeamsAcceptDashinvitationPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsAcceptDashinvitation"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AcceptInvitationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AcceptInvitationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuditTenantidVarLogsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuditTenantidVarLogs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAuditLogsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAuditLogsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuditTenantidVarStatsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuditTenantidVarStats"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAuditStatsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAuditStatsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1758521355304": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodHelloOptions",
        "ApiGatewayMethodAuthRegisterOptions",
        "ApiGatewayMethodAuthLoginOptions",
        "ApiGatewayMethodAnalyticsEventsOptions",
        "ApiGatewayMethodAnalyticsDataOptions",
        "ApiGatewayMethodUsersProfileOptions",
        "ApiGatewayMethodUsersProfileUpdateOptions",
        "ApiGatewayMethodTeamsTenantidVarMembersOptions",
        "ApiGatewayMethodTeamsInviteOptions",
        "ApiGatewayMethodTeamsAcceptDashinvitationOptions",
        "ApiGatewayMethodAuditTenantidVarLogsOptions",
        "ApiGatewayMethodAuditTenantidVarStatsOptions",
        "ApiGatewayMethodHelloGet",
        "ApiGatewayMethodAuthRegisterPost",
        "ApiGatewayMethodAuthLoginPost",
        "ApiGatewayMethodAnalyticsEventsPost",
        "ApiGatewayMethodAnalyticsDataGet",
        "ApiGatewayMethodUsersProfilePost",
        "ApiGatewayMethodUsersProfileUpdatePut",
        "ApiGatewayMethodTeamsTenantidVarMembersGet",
        "ApiGatewayMethodTeamsInvitePost",
        "ApiGatewayMethodTeamsAcceptDashinvitationPost",
        "ApiGatewayMethodAuditTenantidVarLogsGet",
        "ApiGatewayMethodAuditTenantidVarStatsGet"
      ]
    },
    "HelloLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HelloLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RegisterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "IngestDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IngestDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAnalyticsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAnalyticsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserProfileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserProfileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserProfileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserProfileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTeamMembersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTeamMembersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InviteUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InviteUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AcceptInvitationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AcceptInvitationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAuditLogsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAuditLogsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAuditStatsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAuditStatsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-analytics-platform-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "WebsocketConnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketConnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "WebsocketDisconnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketDisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "WebsocketDefaultWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebsocketDefaultLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "WebsocketConnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "WebsocketConnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketConnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "WebsocketDisconnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "WebsocketDisconnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketDisconnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "WebsocketDefaultLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "WebsocketDefaultLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsocketDefaultLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "WebsocketConnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "WebsocketDisconnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdefaultWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$default",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "WebsocketDefaultWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM"
        }
      }
    },
    "WebsocketsDeploymentzQCC0vPKf5DrGgwBEYl9J5F4Iy6DzFvmFRz0IZyhZM": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute",
        "SdefaultWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "TenantsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "analytics-platform-dev-tenants",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "tenantId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "tenantId",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "AnalyticsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "analytics-platform-dev-analytics",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "tenantId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "tenantId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timestamp",
            "KeyType": "RANGE"
          }
        ]
      }
    },
    "ConnectionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "analytics-platform-dev-connections",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "connectionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "connectionId",
            "KeyType": "HASH"
          }
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "UserProfilesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "analytics-platform-user-profiles-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "tenantId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "TenantIndex",
            "KeySchema": [
              {
                "AttributeName": "tenantId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "TeamInvitationsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "analytics-platform-team-invitations-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "invitationId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "tenantId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "invitationId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "EmailIndex",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "TenantIndex",
            "KeySchema": [
              {
                "AttributeName": "tenantId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AuditLogsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "analytics-platform-audit-logs-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "logId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "tenantId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "logId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "TenantTimeIndex",
            "KeySchema": [
              {
                "AttributeName": "tenantId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-982a0670-55d2",
      "Export": {
        "Name": "sls-analytics-platform-dev-ServerlessDeploymentBucketName"
      }
    },
    "HelloLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HelloLambdaVersionaCRw9HYQ3TQ0mQY9C6AqGqjdz5MTZODD2IKlFeUU"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-HelloLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaVersioneX74bk5lc2An6QoprQNpGy9pqKgLq2i5E3NMeSMFs"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-RegisterLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersion67jid1a9FU7wdoHgRRh5rxY2zcLnEsVgpmi2JMbn7Q"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "IngestDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IngestDataLambdaVersionpVARNxv8K5TvYe8PnDEaejtXEXR5W88Ex2qABTKn0c"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-IngestDataLambdaFunctionQualifiedArn"
      }
    },
    "GetAnalyticsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAnalyticsLambdaVersionPxFNhc1ECH4C7lpNHNt7TfYfS8xkzLWMWjc171P67es"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-GetAnalyticsLambdaFunctionQualifiedArn"
      }
    },
    "WebsocketConnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsocketConnectLambdaVersionb5lxb6q2hfppblGJWXaHl7SrpS2Dosal39kpdPYKmA"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-WebsocketConnectLambdaFunctionQualifiedArn"
      }
    },
    "WebsocketDisconnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsocketDisconnectLambdaVersiono73I1laJfQJP4sKb3FbbqwqLSaxKbVZsJLMrJOekA"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-WebsocketDisconnectLambdaFunctionQualifiedArn"
      }
    },
    "WebsocketDefaultLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsocketDefaultLambdaVersionOgBDbNmsxFnvZlZQR2ZbeFRdcKiL5tS8NLrp1kpWdE"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-WebsocketDefaultLambdaFunctionQualifiedArn"
      }
    },
    "GetUserProfileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserProfileLambdaVersionjUdXrZsldIFlWpVAKc1r5JFGrcANFrFcnaCwK5HPk"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-GetUserProfileLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserProfileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserProfileLambdaVersionFZNs1cwR4WDSz4SrcokBtqki593e9gwFWabLDzOk9mM"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-UpdateUserProfileLambdaFunctionQualifiedArn"
      }
    },
    "GetTeamMembersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTeamMembersLambdaVersionOcislgfmHRmDeiNW2HIs2o8RNJFrcgJczMwyQRebd0"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-GetTeamMembersLambdaFunctionQualifiedArn"
      }
    },
    "InviteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InviteUserLambdaVersionWGqCE2tbupUaUqW4emuBz2QZ5DwDLceK0uXFAHpFFA"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-InviteUserLambdaFunctionQualifiedArn"
      }
    },
    "AcceptInvitationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AcceptInvitationLambdaVersionjpRjnRBgv7tB4Yh8lRnQL4VlUsCo1qJHMo8OlkmhdpA"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-AcceptInvitationLambdaFunctionQualifiedArn"
      }
    },
    "GetAuditLogsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAuditLogsLambdaVersionuKUTPvRCBFoGPSOm1TPEe3smC8UoqgoxJPmVR7ujU"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-GetAuditLogsLambdaFunctionQualifiedArn"
      }
    },
    "GetAuditStatsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAuditStatsLambdaVersionUPRajgtRwvLLlXumvfYpgpOZKwS6k4zTLpYvUoIEELY"
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-GetAuditStatsLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-ServiceEndpoint"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-analytics-platform-dev-ServiceEndpointWebsocket"
      }
    }
  }
}